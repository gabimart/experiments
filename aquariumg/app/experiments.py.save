import time
import threading
from datetime import datetime
from .config import LIGTH_START_TIME, LIGHT_ON_TIME


class Aquarium(object):

    def __init__(self,lightStartTime = LIGHT_START_TIME,lightOnTime = LIGHT_ON_TIME):
        self.lightOnTime = lightOnTime
        self.lightStartTime = lightStartTime
        self._lightManualOn = False
        self._lightOn = False
        self._aquariumOn = True
        self._lastManualFeed = 0
        self._lastAutoFeed = 0
        self.lightThread = threading.Thread(target=self.lightController)
        self.lightThread.setDaemon(True)
        self.lightThread.start()

    def tryFeed(self):
        currentHour = datetime.datetime.now().hour
        if currentHour - self._lastManualFeed < 0: 
            manualLapse = currentHour + 24 - self.lastManualFeed
        else: manualLapse =  currentHour - self._lastManualFeed
        if currentHour - self._lastAutoFeed < 0: 
            manualLapse = currentHour + 24 - self.lastAutoFeed
        else: autoLapse =  currentHour - self._lastAutoFeed
        if autoLapse >= REQUIRED_FEED_LAPSE and manualLapse >=         if currentHour - self._lastManualFeed < 0: 
            manualLapse = currentHour + 24 - self.lastManualFeed
        else: manualLapse =  currentHour - self._lastManualFeed



    def autoFeeding(self):
        while self._aquariumOn:
            try:
                

    def food(self):
        try:
            print 'Feeding fish'
            f=open("/sys/class/gpio/gpio14/value","w")
            f.write("0")
            f.seek(0)
            time.sleep(1)
            f.write("1")
            f.close()
            print 'Fish feeded'            
            return 'Fishes feeded'
        except:
            return 'Error feeding'

    def lightController(self):
        while self._aquariumOn:    
            try:
                currentHour = datetime.now().hour
                if (currentHour >= self.lightStartTime) and (currentHour < self.lightStartTime + self.lightOnTime):
                    f=open("/sys/class/gpio/gpio2/value","w")
                    f.write("1")
                    f.close()
                    self._lightOn = True
                else:
                    if self._lightManualOn != True:
                        f=open("/sys/class/gpio/gpio2/value","w")
                        f.write("0")
                        f.close()
                        self._lightOn = False
                    else:
                        print 'Light turned on by user'
                time.sleep(20)
            except KeyboardInterrupt:
                print 'Stopping light control thread'
                self._aquariumOn = False
            except:
                print "Error in light control"

        print "Light controller off"

    def lightOneMinute(self):
        if self._lightOn == False:
            self._lightManualOn = True
            f2=open("/sys/class/gpio/gpio2/value","w")
            f2.write("1")
            f2.seek(0)
            time.sleep(60)
            f2.write("0")
            f2.close()
            self._lightManualOn = False
            print "Done"
        else:
            print "Light is on"

    def turnLightOn(self):
        try:
            lightThread = threading.Thread(target = self.lightOneMinute)
            lightThread.start()
            if self._lightOn == True: return "Light already on"
            return "Light turned on"
        except:
            print "Error starting light thread"
            return "Error"
     

